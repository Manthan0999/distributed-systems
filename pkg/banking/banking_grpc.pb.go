// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.0
// source: banking.proto

package banking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BankingService_IntraShardTransaction_FullMethodName = "/banking.BankingService/IntraShardTransaction"
	BankingService_CrossShardTransaction_FullMethodName = "/banking.BankingService/CrossShardTransaction"
	BankingService_ReplicateTransaction_FullMethodName  = "/banking.BankingService/ReplicateTransaction"
	BankingService_GetBalance_FullMethodName            = "/banking.BankingService/GetBalance"
	BankingService_UpdateLiveServers_FullMethodName     = "/banking.BankingService/UpdateLiveServers"
	BankingService_Abort_FullMethodName                 = "/banking.BankingService/Abort"
	BankingService_Prepare_FullMethodName               = "/banking.BankingService/Prepare"
	BankingService_Accept_FullMethodName                = "/banking.BankingService/Accept"
	BankingService_Commit_FullMethodName                = "/banking.BankingService/Commit"
	BankingService_GetDatastore_FullMethodName          = "/banking.BankingService/GetDatastore"
	BankingService_CrossShardPrepare_FullMethodName     = "/banking.BankingService/CrossShardPrepare"
	BankingService_CrossShardCommit_FullMethodName      = "/banking.BankingService/CrossShardCommit"
	BankingService_CrossShardAbort_FullMethodName       = "/banking.BankingService/CrossShardAbort"
)

// BankingServiceClient is the client API for BankingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankingServiceClient interface {
	// Intra-shard transaction
	IntraShardTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	// Cross-shard transaction
	CrossShardTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	// Replicate transaction to other servers in the cluster
	ReplicateTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	GetBalance(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error)
	UpdateLiveServers(ctx context.Context, in *LiveServersRequest, opts ...grpc.CallOption) (*LiveServersResponse, error)
	Abort(ctx context.Context, in *AbortRequest, opts ...grpc.CallOption) (*AbortResponse, error)
	// Paxos Protocol Methods
	Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareResponse, error)
	Accept(ctx context.Context, in *AcceptRequest, opts ...grpc.CallOption) (*AcceptResponse, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	GetDatastore(ctx context.Context, in *GetDatastoreRequest, opts ...grpc.CallOption) (*GetDatastoreResponse, error)
	CrossShardPrepare(ctx context.Context, in *CrossShardPrepareRequest, opts ...grpc.CallOption) (*CrossShardPrepareResponse, error)
	CrossShardCommit(ctx context.Context, in *CrossShardCommitRequest, opts ...grpc.CallOption) (*CrossShardCommitResponse, error)
	CrossShardAbort(ctx context.Context, in *CrossShardAbortRequest, opts ...grpc.CallOption) (*CrossShardAbortResponse, error)
}

type bankingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankingServiceClient(cc grpc.ClientConnInterface) BankingServiceClient {
	return &bankingServiceClient{cc}
}

func (c *bankingServiceClient) IntraShardTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, BankingService_IntraShardTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) CrossShardTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, BankingService_CrossShardTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) ReplicateTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, BankingService_ReplicateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) GetBalance(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountResponse)
	err := c.cc.Invoke(ctx, BankingService_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) UpdateLiveServers(ctx context.Context, in *LiveServersRequest, opts ...grpc.CallOption) (*LiveServersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LiveServersResponse)
	err := c.cc.Invoke(ctx, BankingService_UpdateLiveServers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) Abort(ctx context.Context, in *AbortRequest, opts ...grpc.CallOption) (*AbortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbortResponse)
	err := c.cc.Invoke(ctx, BankingService_Abort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareResponse)
	err := c.cc.Invoke(ctx, BankingService_Prepare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) Accept(ctx context.Context, in *AcceptRequest, opts ...grpc.CallOption) (*AcceptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptResponse)
	err := c.cc.Invoke(ctx, BankingService_Accept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, BankingService_Commit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) GetDatastore(ctx context.Context, in *GetDatastoreRequest, opts ...grpc.CallOption) (*GetDatastoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDatastoreResponse)
	err := c.cc.Invoke(ctx, BankingService_GetDatastore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) CrossShardPrepare(ctx context.Context, in *CrossShardPrepareRequest, opts ...grpc.CallOption) (*CrossShardPrepareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CrossShardPrepareResponse)
	err := c.cc.Invoke(ctx, BankingService_CrossShardPrepare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) CrossShardCommit(ctx context.Context, in *CrossShardCommitRequest, opts ...grpc.CallOption) (*CrossShardCommitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CrossShardCommitResponse)
	err := c.cc.Invoke(ctx, BankingService_CrossShardCommit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) CrossShardAbort(ctx context.Context, in *CrossShardAbortRequest, opts ...grpc.CallOption) (*CrossShardAbortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CrossShardAbortResponse)
	err := c.cc.Invoke(ctx, BankingService_CrossShardAbort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankingServiceServer is the server API for BankingService service.
// All implementations must embed UnimplementedBankingServiceServer
// for forward compatibility.
type BankingServiceServer interface {
	// Intra-shard transaction
	IntraShardTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	// Cross-shard transaction
	CrossShardTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	// Replicate transaction to other servers in the cluster
	ReplicateTransaction(context.Context, *Transaction) (*TransactionResponse, error)
	GetBalance(context.Context, *AccountRequest) (*AccountResponse, error)
	UpdateLiveServers(context.Context, *LiveServersRequest) (*LiveServersResponse, error)
	Abort(context.Context, *AbortRequest) (*AbortResponse, error)
	// Paxos Protocol Methods
	Prepare(context.Context, *PrepareRequest) (*PrepareResponse, error)
	Accept(context.Context, *AcceptRequest) (*AcceptResponse, error)
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
	GetDatastore(context.Context, *GetDatastoreRequest) (*GetDatastoreResponse, error)
	CrossShardPrepare(context.Context, *CrossShardPrepareRequest) (*CrossShardPrepareResponse, error)
	CrossShardCommit(context.Context, *CrossShardCommitRequest) (*CrossShardCommitResponse, error)
	CrossShardAbort(context.Context, *CrossShardAbortRequest) (*CrossShardAbortResponse, error)
	mustEmbedUnimplementedBankingServiceServer()
}

// UnimplementedBankingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBankingServiceServer struct{}

func (UnimplementedBankingServiceServer) IntraShardTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntraShardTransaction not implemented")
}
func (UnimplementedBankingServiceServer) CrossShardTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossShardTransaction not implemented")
}
func (UnimplementedBankingServiceServer) ReplicateTransaction(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicateTransaction not implemented")
}
func (UnimplementedBankingServiceServer) GetBalance(context.Context, *AccountRequest) (*AccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedBankingServiceServer) UpdateLiveServers(context.Context, *LiveServersRequest) (*LiveServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLiveServers not implemented")
}
func (UnimplementedBankingServiceServer) Abort(context.Context, *AbortRequest) (*AbortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Abort not implemented")
}
func (UnimplementedBankingServiceServer) Prepare(context.Context, *PrepareRequest) (*PrepareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedBankingServiceServer) Accept(context.Context, *AcceptRequest) (*AcceptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accept not implemented")
}
func (UnimplementedBankingServiceServer) Commit(context.Context, *CommitRequest) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedBankingServiceServer) GetDatastore(context.Context, *GetDatastoreRequest) (*GetDatastoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatastore not implemented")
}
func (UnimplementedBankingServiceServer) CrossShardPrepare(context.Context, *CrossShardPrepareRequest) (*CrossShardPrepareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossShardPrepare not implemented")
}
func (UnimplementedBankingServiceServer) CrossShardCommit(context.Context, *CrossShardCommitRequest) (*CrossShardCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossShardCommit not implemented")
}
func (UnimplementedBankingServiceServer) CrossShardAbort(context.Context, *CrossShardAbortRequest) (*CrossShardAbortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossShardAbort not implemented")
}
func (UnimplementedBankingServiceServer) mustEmbedUnimplementedBankingServiceServer() {}
func (UnimplementedBankingServiceServer) testEmbeddedByValue()                        {}

// UnsafeBankingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankingServiceServer will
// result in compilation errors.
type UnsafeBankingServiceServer interface {
	mustEmbedUnimplementedBankingServiceServer()
}

func RegisterBankingServiceServer(s grpc.ServiceRegistrar, srv BankingServiceServer) {
	// If the following call pancis, it indicates UnimplementedBankingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BankingService_ServiceDesc, srv)
}

func _BankingService_IntraShardTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).IntraShardTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_IntraShardTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).IntraShardTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_CrossShardTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).CrossShardTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_CrossShardTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).CrossShardTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_ReplicateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).ReplicateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_ReplicateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).ReplicateTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).GetBalance(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_UpdateLiveServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).UpdateLiveServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_UpdateLiveServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).UpdateLiveServers(ctx, req.(*LiveServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_Abort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).Abort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_Abort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).Abort(ctx, req.(*AbortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_Prepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).Prepare(ctx, req.(*PrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_Accept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).Accept(ctx, req.(*AcceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_GetDatastore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatastoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).GetDatastore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_GetDatastore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).GetDatastore(ctx, req.(*GetDatastoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_CrossShardPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrossShardPrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).CrossShardPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_CrossShardPrepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).CrossShardPrepare(ctx, req.(*CrossShardPrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_CrossShardCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrossShardCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).CrossShardCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_CrossShardCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).CrossShardCommit(ctx, req.(*CrossShardCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_CrossShardAbort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrossShardAbortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).CrossShardAbort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_CrossShardAbort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).CrossShardAbort(ctx, req.(*CrossShardAbortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankingService_ServiceDesc is the grpc.ServiceDesc for BankingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "banking.BankingService",
	HandlerType: (*BankingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IntraShardTransaction",
			Handler:    _BankingService_IntraShardTransaction_Handler,
		},
		{
			MethodName: "CrossShardTransaction",
			Handler:    _BankingService_CrossShardTransaction_Handler,
		},
		{
			MethodName: "ReplicateTransaction",
			Handler:    _BankingService_ReplicateTransaction_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _BankingService_GetBalance_Handler,
		},
		{
			MethodName: "UpdateLiveServers",
			Handler:    _BankingService_UpdateLiveServers_Handler,
		},
		{
			MethodName: "Abort",
			Handler:    _BankingService_Abort_Handler,
		},
		{
			MethodName: "Prepare",
			Handler:    _BankingService_Prepare_Handler,
		},
		{
			MethodName: "Accept",
			Handler:    _BankingService_Accept_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _BankingService_Commit_Handler,
		},
		{
			MethodName: "GetDatastore",
			Handler:    _BankingService_GetDatastore_Handler,
		},
		{
			MethodName: "CrossShardPrepare",
			Handler:    _BankingService_CrossShardPrepare_Handler,
		},
		{
			MethodName: "CrossShardCommit",
			Handler:    _BankingService_CrossShardCommit_Handler,
		},
		{
			MethodName: "CrossShardAbort",
			Handler:    _BankingService_CrossShardAbort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "banking.proto",
}
